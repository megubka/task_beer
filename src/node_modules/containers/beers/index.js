import React, { Component, Fragment } from 'react'
import { connect } from 'react-redux'
import { BrowserRouter as Router, Link } from 'react-router-dom'
import * as R from "ramda";

import { fetchBeers, loadMoreBeers } from 'actions'
import { getBeers } from 'selectors'

class Beers extends Component {

    componentDidMount () {
        this.props.fetchBeers()
        window.addEventListener('scroll', this.handleScroll.bind(this))
    }

    handleScroll () {
        const windowHeight = 'innerHeight' in window ? window.innerHeight : document.documentElement.offsetHeight;
        const body = document.body;
        const html = document.documentElement;
        const docHeight = Math.max(body.scrollHeight, body.offsetHeight, html.clientHeight, html.scrollHeight);
        const windowBottom = windowHeight + window.pageYOffset;

        if (windowBottom >= docHeight) {
            //console.log('you reached the bottom')
            this.props.loadMoreBeers()
        }
    }

    //rendering each beer and assinging a link to the modal
    renderBeer (beer, index) {
        //Setting a short name, because sometimes it is too big
        let shortName;
        beer.name.length > 25 ? shortName = `${R.take(25, beer.name)}...` : shortName = beer.name
        //Setting a shorter tagline, because sometimes it is too big
        let shortTagline;
        beer.tagline.length > 35 ? shortTagline = `${R.take(35, beer.tagline)}...` : shortTagline = beer.tagline
        return (
            <Link
                key={index}
                to={{
                    pathname: `/details/${beer.id}`,
                    state: { modal: true }
                }}
                className='col-md-4'
            >
                <div className='thumbnail'>
                    <img className='img-thumbnail'
                        src={beer.image_url}
                        alt={beer.name} />
                    <div className='caption'>
                        <h4>{shortName}</h4>
                        <p>{shortTagline}</p>
                    </div>
                </div>
            </Link>
        )
    }

    render () {
        const {beers} = this.props
        return (
            <Fragment>
                <div className='row'>
                    {beers.map((beer, index) => this.renderBeer(beer, index))}
                </div>
            </Fragment>
        )
    
    }
}

const mapStateToProps = state => ({
    beers: getBeers(state)
})

const mapDispatchToProps = {
    fetchBeers,
    loadMoreBeers
}

export default connect(mapStateToProps, mapDispatchToProps)(Beers)